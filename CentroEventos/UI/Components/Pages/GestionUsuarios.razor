@page "/GestionUsuarios"
@rendermode InteractiveServer

@using Aplicacion.entidades
@using Aplicacion.UseCases
@using UI.Components.Pages

@inject Aplicacion.interfacesServ.IServicioAutenticacion servicioAuth
@inject NavigationManager Navigation
@inject IRepositorioPersona ServicioPersona

<h1> Gestion de Usuarios </h1>

@if (personas == null || personas.Count == 0)
{
    <div>No hay personas registradas.</div>
}
else
{
    <ul class="list-group">
        @foreach (var persona in personas)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                @if (editandoPersona != null && editandoPersona._id == persona._id)
                {
                    <div>
                        nombre: <input class="form-control mb-2" @bind="editandoPersona._nombre" />
                        Apellido: <input class="form-control mb-2" @bind="editandoPersona._apellido" />
                        <input class="form-control mb-2" @bind="editandoPersona._dni" />
                        <input class="form-control mb-2" @bind="editandoPersona._telefono" />
                        <input class="form-control mb-2" @bind="editandoPersona._mail" />
                    </div>
                    <span>
                        <button class="btn btn-success btn-sm me-2" @onclick="EditarPersonaDC">Guardar</button>
                        <button class="btn btn-secondary btn-sm" @onclick="CancelarEdicion">Cancelar</button>
                    </span>
                }
                else
                {
                    <!-- Modo vista -->
                    <span>@persona._nombre @persona._apellido -- @persona._dni -- @persona._mail -- @persona._telefono</span>
                    <span>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => EditarPersona(persona)">Editar</button>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => EditarPermisos(persona)">Editar Permisos</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarPersonaDC(persona)">Eliminar</button>
                    </span>
                }
            </li>
        }
    </ul>

    <DialogoConfirmacion @ref="dialogoConfirmacion" Mensaje="@mensajeDialogo" OnConfirmado="AccionConfirmada" />

}

@code {
    public int IdPersona;
    public List<Persona>? personas;
    private Persona? editandoPersona;
    private Persona? personaAEditarOriginal;
    private DialogoConfirmacion? dialogoConfirmacion;
    private string? mensajeDialogo;
    private Persona? personaAOperar;
    private string? accionPendiente; 
    private Persona? UsuarioActual;


    private void EliminarPersonaDC(Persona persona)
    {
        personaAOperar = persona;
        mensajeDialogo = $"¿Seguro que quieres eliminar a {persona._nombre}?";
        accionPendiente = "eliminar";
        dialogoConfirmacion.Mostrar();
    }

    private void EditarPersonaDC()
    {
        mensajeDialogo = $"¿Seguro que quieres editar a {personaAEditarOriginal._nombre}?";
        accionPendiente = "editar";
        dialogoConfirmacion.Mostrar();
    }

    private void AccionConfirmada()
    {
        if (accionPendiente == "eliminar")
        {
            Console.WriteLine("entro a eliminar");
            EliminarPersona(personaAOperar);

        }
        else if (accionPendiente == "editar")
        {
            GuardarEdicion();

        }
        accionPendiente = null;
        mensajeDialogo = null;
        personaAOperar = null;
        StateHasChanged();
    }



    protected void EditarPersona(Persona p)
    {

        editandoPersona = new Persona(p._dni, p._nombre, p._apellido, p._mail, p._telefono, p._contraseña);
        editandoPersona._id=p._id;
        personaAEditarOriginal = p;
        StateHasChanged();

    }

    protected void EliminarPersona(Persona p)
    {
        
        new BajaPersona(this.ServicioPersona).Ejecutar(p._id);
        this.personas = new ListarTodasLasPersonas(ServicioPersona).Ejecutar();
        if (UsuarioActual._id == p._id){
            servicioAuth.CerrarSesionAsync();
            Navigation.NavigateTo("/home");
        }
        StateHasChanged();
    }

    protected void GuardarEdicion()
    {
        if (editandoPersona != null && personaAEditarOriginal != null)
        {
            personaAEditarOriginal._nombre = editandoPersona._nombre;
            personaAEditarOriginal._apellido = editandoPersona._apellido;
            personaAEditarOriginal._mail = editandoPersona._mail;
            personaAEditarOriginal._telefono = editandoPersona._telefono;
            personaAEditarOriginal._dni = editandoPersona._dni;

            new ModificarPersona(ServicioPersona).Ejecutar(personaAEditarOriginal);
            
            editandoPersona = null;
            personaAEditarOriginal = null;
            StateHasChanged();
        }
    }

    protected void CancelarEdicion()
    {
        editandoPersona = null;
        personaAEditarOriginal = null;
        StateHasChanged();
    }


    protected void EditarPermisos(Persona p){
        
    }


    protected override async Task OnInitializedAsync()
    {

        this.personas = new ListarTodasLasPersonas(ServicioPersona).Ejecutar();
        this.UsuarioActual = await servicioAuth.ObtenerUsuarioActualAsync();
        StateHasChanged();
    }

}