@*
@page "/RealizarReserva/{EventoId:int}"
@rendermode InteractiveServer

@using Aplicacion.entidades
@using Aplicacion.UseCases.UseCasesReserva

@inject NavigationManager Navigation
@inject AltaReserva AltaReserva
@inject IRepositorioEventoDeportivo ServicioEvento
@inject IRepositorioPersona ServicioPersona

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-calendar-plus"></i> Realizar Reserva
                    </h4>
                </div>
                
                @if (evento != null)
                {
                    <div class="card-body">
                        <!-- Información del evento -->
                        <div class="alert alert-info">
                            <h5><strong>@evento._nombre</strong></h5>
                            <p class="mb-1"><strong>Descripción:</strong> @evento._descripcion</p>
                            <p class="mb-1"><strong>Fecha:</strong> @evento._fechaHoraInicio.ToString("dd/MM/yyyy HH:mm")</p>
                            <p class="mb-1"><strong>Duración:</strong> @evento._duracionHoras horas</p>
                            <p class="mb-0"><strong>Cupo máximo:</strong> @evento._cupoMaximo personas</p>
                        </div>

                        <!-- Formulario simple -->
                        <div class="mb-3">
                            <label for="dni" class="form-label">DNI de la Persona:</label>
                            <input type="text" 
                                   class="form-control" 
                                   id="dni"
                                   @bind="dniPersona" 
                                   placeholder="Ingrese el DNI" />
                            <div class="form-text">
                                Ingrese el DNI de la persona que realizará la reserva.
                            </div>
                        </div>

                        <div class="alert alert-secondary">
                            <small>
                                <strong>Información automática:</strong><br>
                                • Fecha de reserva: @DateTime.Now.ToString("dd/MM/yyyy HH:mm")<br>
                                • Estado inicial: Pendiente
                            </small>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="Volver">
                                <i class="fas fa-arrow-left"></i> Volver
                            </button>
                            <button type="button" 
                                    class="btn btn-success" 
                                    @onclick="CrearReserva"
                                    disabled="@(!PuedeReservar())">
                                <i class="fas fa-save"></i> Crear Reserva
                            </button>
                        </div>

                        @if (!string.IsNullOrEmpty(mensajeError))
                        {
                            <div class="alert alert-danger mt-3">
                                <i class="fas fa-exclamation-triangle"></i> @mensajeError
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(mensajeExito))
                        {
                            <div class="alert alert-success mt-3">
                                <i class="fas fa-check-circle"></i> @mensajeExito
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="card-body">
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle"></i> 
                            No se pudo cargar la información del evento.
                        </div>
                        <button class="btn btn-secondary" @onclick="Volver">
                            <i class="fas fa-arrow-left"></i> Volver
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int EventoId { get; set; }

    private EventoDeportivo? evento;
    private string dniPersona = string.Empty;
    
    // Mensajes
    private string mensajeError = string.Empty;
    private string mensajeExito = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarEvento();
    }

    private async Task CargarEvento()
    {
        try
        {
            evento = await ServicioEvento.ObtenerPorIdAsync(EventoId);
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al cargar el evento: {ex.Message}";
            Console.WriteLine($"Error cargando evento: {ex.Message}");
        }
    }

    // ✅ MÉTODO PRINCIPAL: Solo usar el caso de uso
    private async Task CrearReserva()
    {
        try
        {
            // Limpiar mensajes
            mensajeError = string.Empty;
            mensajeExito = string.Empty;

            // Validar DNI en la UI
            if (string.IsNullOrWhiteSpace(dniPersona))
            {
                mensajeError = "Debe ingresar un DNI válido.";
                return;
            }

            // Buscar persona por DNI
            int personaId = ServicioPersona.getIdConDocumento(dniPersona);
            if (personaId == -1)
            {
                mensajeError = $"No se encontró una persona con DNI: {dniPersona}";
                return;
            }

            // ✅ SOLO ESTO: Delegar todo al caso de uso
            AltaReserva.Ejecutar(personaId, EventoId);

            mensajeExito = "¡Reserva creada exitosamente!";
            
            // Limpiar formulario
            dniPersona = string.Empty;
            StateHasChanged();

            // Redireccionar
            await Task.Delay(1500);
            Volver();
        }
        catch (ValidacionException vex)
        {
            mensajeError = $"Error de validación: {vex.Message}";
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al crear la reserva: {ex.Message}";
            Console.WriteLine($"Error creando reserva: {ex.Message}");
        }
    }

    private bool PuedeReservar()
    {
        return !string.IsNullOrWhiteSpace(dniPersona) && evento != null;
    }

    private void Volver()
    {
        Navigation.NavigateTo("/GestionEventoDeportivo");
    }
}
*@