@page "/RegistroDePersona"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@inject AltaPersona AltaPersona
@inject NavigationManager Navigation

<h3>Registro de Persona</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}

<EditForm Model="registroModel" OnValidSubmit="RegistrarPersona" FormName="registroPersona">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>DNI:</label>
        <InputText class="form-control" @bind-Value="registroModel.Dni" />
        <ValidationMessage For="@(() => registroModel.Dni)" />
    </div>
    <div class="mb-3">
        <label>Nombre:</label>
        <InputText class="form-control" @bind-Value="registroModel.Nombre" />
        <ValidationMessage For="@(() => registroModel.Nombre)" />
    </div>
    <div class="mb-3">
        <label>Apellido:</label>
        <InputText class="form-control" @bind-Value="registroModel.Apellido" />
        <ValidationMessage For="@(() => registroModel.Apellido)" />
    </div>
    <div class="mb-3">
        <label>Email:</label>
        <InputText class="form-control" @bind-Value="registroModel.Mail" />
        <ValidationMessage For="@(() => registroModel.Mail)" />
    </div>
    <div class="mb-3">
        <label>Teléfono:</label>
        <InputText class="form-control" @bind-Value="registroModel.Telefono" />
        <ValidationMessage For="@(() => registroModel.Telefono)" />
    </div>
    <div class="mb-3">
        <label>Contraseña:</label>
        <InputText type="password" class="form-control" @bind-Value="registroModel.Contraseña" />
        <ValidationMessage For="@(() => registroModel.Contraseña)" />
    </div>
    <button type="submit" class="btn btn-primary">Registrar</button>
</EditForm>

@code {
    private RegistroModel registroModel = new();
    private string ErrorMessage;
    private string SuccessMessage;

    private void RegistrarPersona()
    {
        Console.WriteLine("Registrar persona es llamado");// xd XD
        ErrorMessage = SuccessMessage = string.Empty;
        try
        {
            AltaPersona.Ejecutar( new Aplicacion.entidades.Persona(
                registroModel.Dni,
                registroModel.Nombre,
                registroModel.Apellido,
                registroModel.Mail,
                registroModel.Telefono,
                registroModel.Contraseña)
            );
            SuccessMessage = "¡Persona registrada correctamente!";
            registroModel = new RegistroModel();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error al registrar la persona: {ex.Message}";
        }
    }

    public class RegistroModel
    {
        [Required(ErrorMessage = "El DNI es obligatorio.")]
        public string Dni { get; set; }
        [Required(ErrorMessage = "El nombre es obligatorio.")]
        public string Nombre { get; set; }
        [Required(ErrorMessage = "El apellido es obligatorio.")]
        public string Apellido { get; set; }
        [Required(ErrorMessage = "El email es obligatorio.")]
        [EmailAddress(ErrorMessage = "Email no válido.")]
        public string Mail { get; set; }
        [Required(ErrorMessage = "El teléfono es obligatorio.")]
        public string Telefono { get; set; }
        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres.")]
        public string Contraseña { get; set; }
    }
}